name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 0 * * 0'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
    
    - name: Check code formatting with Black
      run: black --check .
      continue-on-error: true
    
    - name: Lint with Ruff
      run: ruff check .
      continue-on-error: true
    
    - name: Type check with mypy
      run: mypy . --ignore-missing-imports
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pyyaml
        # Note: We can't install actual agno or agent-os-sdk without licenses
        # Tests will use mocked/simulated versions
    
    - name: Set up environment
      run: |
        cp .env.example .env
        # Add mock API keys for testing
        echo "AGNO_API_KEY=mock_test_key" >> .env
        echo "AGENT_OS_API_KEY=mock_test_key" >> .env
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      continue-on-error: true  # Tests may fail without actual SDKs
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check example files exist
      run: |
        test -f examples/agno-prototype.py
        test -f examples/agent-os-config.yaml
        test -f examples/hybrid-bridge.py
    
    - name: Validate YAML configuration
      run: |
        python -m pip install pyyaml
        python -c "import yaml; yaml.safe_load(open('examples/agent-os-config.yaml'))"
    
    - name: Check Python syntax in examples
      run: |
        python -m py_compile examples/agno-prototype.py
        python -m py_compile examples/hybrid-bridge.py

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check required documentation files
      run: |
        test -f README.md
        test -f LICENSE
        test -f CONTRIBUTING.md
        test -f DISCLAIMER.md
        test -f CHANGELOG.md
        test -f .env.example
    
    - name: Check for broken links in README
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test, validate-examples]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build distribution
      run: python -m build
    
    - name: Check distribution
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution
        path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Check if version changed
      id: version
      run: |
        echo "::set-output name=changed::false"
        # Add version detection logic here
    
    - name: Create GitHub Release
      if: steps.version.outputs.changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
