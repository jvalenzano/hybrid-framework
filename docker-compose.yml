version: '3.8'

# Docker Compose for Hybrid Framework Local Development
# Note: This provides a development environment for testing the bridge pattern
# Actual Agno and Agent OS services require commercial licenses

services:
  # Mock Agno Service (for testing without license)
  mock-agno:
    image: python:3.11-slim
    container_name: hybrid-mock-agno
    volumes:
      - ./examples:/app
      - ./tests:/tests
    working_dir: /app
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_NAME=mock-agno
      - PORT=8001
    command: >
      sh -c "pip install fastapi uvicorn pydantic &&
             python -c 'from fastapi import FastAPI; app = FastAPI(); 
             @app.get(\"/health\"); async def health(): return {\"status\": \"healthy\", \"service\": \"mock-agno\"}'
             && uvicorn main:app --host 0.0.0.0 --port 8001"
    ports:
      - "8001:8001"
    networks:
      - hybrid-network

  # Mock Agent OS Service (for testing without license)  
  mock-agent-os:
    image: python:3.11-slim
    container_name: hybrid-mock-agent-os
    volumes:
      - ./examples:/app
      - ./tests:/tests
    working_dir: /app
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_NAME=mock-agent-os
      - PORT=8002
    command: >
      sh -c "pip install fastapi uvicorn pydantic &&
             python -c 'from fastapi import FastAPI; app = FastAPI();
             @app.get(\"/health\"); async def health(): return {\"status\": \"healthy\", \"service\": \"mock-agent-os\"}'
             && uvicorn main:app --host 0.0.0.0 --port 8002"
    ports:
      - "8002:8002"
    networks:
      - hybrid-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: hybrid-redis
    ports:
      - "6379:6379"
    networks:
      - hybrid-network
    volumes:
      - redis-data:/data

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: hybrid-postgres
    environment:
      - POSTGRES_USER=hybrid
      - POSTGRES_PASSWORD=hybrid_password
      - POSTGRES_DB=hybrid_framework
    ports:
      - "5432:5432"
    networks:
      - hybrid-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: hybrid-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - hybrid-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hybrid-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    networks:
      - hybrid-network
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  # Jupyter notebook for experimentation
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: hybrid-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./:/home/jovyan/work
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - hybrid-network

networks:
  hybrid-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
